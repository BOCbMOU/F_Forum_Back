module.exports = {
  env: {
    es6: true,
    node: true,
  },
  extends: [
    'eslint:recommended',
    'airbnb-base',
    'prettier/@typescript-eslint',
    'plugin:@typescript-eslint/eslint-recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:@typescript-eslint/recommended-requiring-type-checking',
    'plugin:import/errors',
    'plugin:import/warnings',
    'plugin:import/typescript',
    'plugin:node/recommended-module',
    'plugin:sonarjs/recommended',
    'plugin:promise/recommended',
  ],
  globals: {
    Atomics: 'readonly',
    SharedArrayBuffer: 'readonly',
  },
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaVersion: 6,
    sourceType: 'module',
    ecmaFeatures: {
      modules: true,
    },
    project: 'tsconfig.json',
  },
  plugins: [
    '@typescript-eslint',
    'import',
    'optimize-regex',
    'sonarjs',
    'promise',
    'prettier',
  ],
  rules: {
    '@typescript-eslint/quotes': ['warn', 'single'],
    '@typescript-eslint/semi': ['warn', 'always'],

    'import/named': 'warn',
    'import/default': 'warn',
    'import/no-absolute-path': 'error',
    'import/no-dynamic-require': 'error',
    'import/no-internal-modules': 'error',
    'import/no-self-import': 'error',
    'import/no-cycle': 'error',
    'import/no-useless-path-segments': 'warn',
    'import/no-unused-modules': [1, { unusedExports: true }],
    'import/export': 'warn',
    'import/no-deprecated': 'warn',
    'import/no-extraneous-dependencies': 'warn',
    'import/no-commonjs': 'warn',
    'import/no-amd': 'warn',
    'import/first': 'warn',
    'import/exports-last': 'warn',
    'import/no-duplicates': 'warn',
    'import/order': [
      'warn',
      {
        alphabetize: {
          order: 'asc',
          caseInsensitive: true,
        },
      },
    ],
    'import/newline-after-import': 'warn',
    'import/no-named-default': 'warn',
    'import/no-anonymous-default-export': 'warn',
    'import/group-exports': 'warn',

    'prettier/prettier': 'error',
    'arrow-parens': ['off', 'as-needed', { requireForBlockBody: true }],
    'comma-dangle': [
      'warn',
      {
        objects: 'always-multiline',
        arrays: 'always-multiline',
        functions: 'never',
      },
    ],
    'optimize-regex/optimize-regex': 'warn',
    'sort-keys': 'off',
  },
};
